generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  name              String?
  description       String?
  phone             String?
  position          String?
  role              UserRole        @default(USER)
  email             String?         @unique
  emailVerified     DateTime?       @map("email_verified")
  image             String?
  password          String?
  isVerified        Boolean         @default(false)
  verificationToken String          @default("")
  courses           String?
  Certificate       Certificate[]
  Course            Course[]
  CoursePayment     CoursePayment[]
  accounts          Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model CourseRegistration {
  id         String @id @default(cuid())
  firstname  String
  lastname   String
  email      String @unique
  occupation String
  course     String
  type       String @default("physical")
  phone      String @default("")

  @@map("courseRegistrations")
}

model Course {
  id            String          @id @default(cuid())
  title         String
  image         String          @default("/course-placeholder.jpg")
  category      String
  textSnippet   String
  videoUrl      String
  tutorId       String
  description   String
  conclusion    String
  summary       String
  virtualPrice  Float
  physicalPrice Float
  noOfClass     String
  classDays     String
  duration      String
  certificate   Boolean
  overView      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  tutor         User            @relation(fields: [tutorId], references: [id])
  CoursePayment CoursePayment[]
}

model Curriculum {
  id                 String @id @default(cuid())
  courseId           String
  headingNumber      String
  headingName        String
  headingDescription String
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Review {
  id           String   @id @default(cuid())
  tutorName    String
  userId       String
  reviewerName String
  rating       Int      @default(0)
  title        String
  description  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CoursePayment {
  id            String        @id @default(cuid())
  transactionId String
  userId        String
  courseId      String
  amount        Float
  currency      String
  status        PaymentStatus @default(PENDING)
  paymentDate   DateTime      @default(now())
  verifiedAt    DateTime      @updatedAt
  Course        Course        @relation(fields: [courseId], references: [id])
  User          User          @relation(fields: [userId], references: [id])
}

model Certificate {
  id             String          @id @default(cuid())
  studentName    String
  issuedDate     DateTime        @default(now())
  platform       String
  userId         String
  courseId       String
  type           CertificateType @default(CertificateOfCompletion)
  certificateUrl String          @default("")
  User           User            @relation(fields: [userId], references: [id])
}

model TutorApplication {
  id          String @id @default(cuid())
  fullname    String
  email       String @unique
  phone       String
  coverletter String
  uploadcv    String

  @@map("tutorApplications")
}

enum CertificateType {
  CertificateOfCompletion
  ProfessionalCertification
  MicroCredentials
}

enum PaymentStatus {
  SUCCESSFUL
  FAILED
  PENDING
}

enum UserRole {
  STUDENT
  TUTOR
  ADMIN
  USER
}
