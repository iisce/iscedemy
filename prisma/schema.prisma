generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String?
  description       String?
  phone             String?
  position          String?
  role              UserRole            @default(USER)
  email             String?             @unique
  emailVerified     DateTime?           @map("email_verified")
  hasStudentId      Boolean             @default(false)
  image             String?
  password          String?
  isVerified        Boolean             @default(false)
  verificationToken String              @default("")
  courses           String?
  bankName          String?             @map("bank_name")
  accountNumber     String?             @map("account_number")
  subaccountCode    String?             @map("subaccount_code")
  recipientCode     String?             @map("recipient_code")
  walletBalance     Float               @default(0)
  Certificate       Certificate[]
  Course            Course[]
  CoursePayment     CoursePayment[]
  accounts          Account[]
  mentorFor         Mentorship[]        @relation("Mentor")
  menteeFor         Mentorship[]        @relation("Mentee")
  submittedProjects ProjectSubmission[]
  progress          Progress[]
  transactions      Transaction[]
  EventPayment      EventPayment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model CourseRegistration {
  id         String @id @default(cuid())
  firstname  String
  lastname   String
  email      String @unique
  occupation String
  course     String
  type       String @default("physical")
  phone      String @default("")

  @@map("courseRegistrations")
}

model Event {
  id          String         @id @default(cuid())
  title       String
  description String?
  price       Int
  date        DateTime
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  payments    EventPayment[]
}

model EventPayment {
  id            String    @id @default(cuid())
  userId        String
  eventId       String
  transactionId String    @unique
  amount        Int
  status        String
  currency      String
  verifiedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  User          User      @relation(fields: [userId], references: [id])
  Event         Event     @relation(fields: [eventId], references: [id])
}

model AwarenessProgramRegistration {
  id          String   @id @default(cuid())
  fullName    String
  age         Int
  dateOfBirth DateTime
  phoneNumber String
  email       String   @unique
  goals       String?
  industry    String?
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("awarenessProgramRegistrations")
}

model Course {
  id            String          @id @default(cuid())
  title         String
  image         String          @default("/course-placeholder.jpg")
  category      String
  textSnippet   String
  videoUrl      String
  videoId       String?
  tutorId       String
  description   String
  conclusion    String
  summary       String
  virtualPrice  Float
  physicalPrice Float
  noOfClass     String
  classDays     String
  duration      String
  certificate   Boolean
  overView      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  tutor         User            @relation(fields: [tutorId], references: [id])
  CoursePayment CoursePayment[]
  Curriculum    Curriculum[]
  projects      Project[]
  mentorships   Mentorship[]
  programType   ProgramType     @default(CRASH_COURSE)
}

model Curriculum {
  id        String   @id @default(cuid())
  courseId  String   @unique
  course    Course   @relation(fields: [courseId], references: [id])
  modules   Module[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Module {
  id                 String     @id @default(cuid())
  curriculumId       String
  curriculum         Curriculum @relation(fields: [curriculumId], references: [id])
  headingNumber      String
  headingName        String
  headingDescription String
  duration           String
  order              Int
  lessons            Lesson[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model Lesson {
  id          String            @id @default(cuid())
  title       String
  lessonKey   String            @unique
  description String
  videoUrl    String
  duration    String
  order       Int
  moduleId    String
  module      Module            @relation(fields: [moduleId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  completedBy CompletedLesson[]
  progress    Progress[]
}

model CompletedLesson {
  id          String   @id @default(cuid())
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userId      String
  completedAt DateTime @default(now())

  @@unique([lessonId, userId])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Project {
  id          String              @id @default(cuid())
  title       String
  description String              @db.Text
  dueDate     DateTime?
  courseId    String
  course      Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  submissions ProjectSubmission[]
}

model ProjectSubmission {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  content     String   @db.Text
  fileUrl     String?
  grade       String?
  feedback    String?  @db.Text
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Mentorship {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  mentorId    String
  mentor      User     @relation("Mentor", fields: [mentorId], references: [id], onDelete: Cascade)
  menteeId    String?
  mentee      User?    @relation("Mentee", fields: [menteeId], references: [id], onDelete: Cascade)
  scheduledAt DateTime
  duration    Int
  meetingUrl  String?
  topic       String?
  notes       String?  @db.Text
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([mentorId, menteeId, scheduledAt])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Review {
  id           String   @id @default(cuid())
  tutorName    String
  userId       String
  courseId     String
  reviewerName String
  rating       Int      @default(0)
  title        String
  description  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CoursePayment {
  id            String        @id @default(cuid())
  transactionId String
  userId        String
  courseId      String
  amount        Float
  currency      String
  status        PaymentStatus @default(PENDING)
  paymentDate   DateTime      @default(now())
  verifiedAt    DateTime      @updatedAt
  Course        Course        @relation(fields: [courseId], references: [id])
  User          User          @relation(fields: [userId], references: [id])
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  type      String
  amount    Float
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Certificate {
  id             String          @id @default(cuid())
  studentName    String
  issuedDate     DateTime        @default(now())
  platform       String
  userId         String
  courseId       String
  type           CertificateType @default(CertificateOfCompletion)
  certificateUrl String          @default("")
  User           User            @relation(fields: [userId], references: [id])
}

model TutorApplication {
  id          String  @id @default(cuid())
  fullname    String
  email       String  @unique
  phone       String
  coverletter String
  uploadcv    String
  course      String?

  @@map("tutorApplications")
}

enum CertificateType {
  CertificateOfCompletion
  ProfessionalCertification
  MicroCredentials
}

enum PaymentStatus {
  SUCCESSFUL
  FAILED
  PENDING
}

enum UserRole {
  STUDENT
  TUTOR
  ADMIN
  USER
}

enum ProgramType {
  CRASH_COURSE
  THREE_MONTHS
  SIX_MONTHS
}
