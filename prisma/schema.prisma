// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PaymentStatus {
  SUCCESSFUL
  FAILED
  PENDING
}

enum UserRole {
  STUDENT
  TUTOR
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  description   String?
  phone         String?
  position      String?
  courses       String?
  role          UserRole        @default(USER)
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  verificationToken   String  @default("")
  isVerified    Boolean       @default(false)
  password      String?
  accounts      Account[]
  CoursePayment CoursePayment[]
  Course        Course[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model CourseRegistration {
  id         String @id @default(cuid())
  firstname  String
  lastname   String
  email      String @unique
  occupation String
  course     String
  type       String @default("physical")
  phone      String @default("")

  @@map("courseRegistrations")
}

model Course {
  id            String  @id @default(cuid())
  title         String
  image         String  @default("/course-placeholder.jpg")
  category      String
  textSnippet   String
  videoUrl      String
  tutorId       String
  tutor         User    @relation(fields: [tutorId], references: [id])
  description   String
  conclusion    String
  summary       String
  virtualPrice  Float
  physicalPrice Float
  noOfClass     String
  classDays     String
  duration      String
  certificate   Boolean
  overView      String?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  CoursePayment CoursePayment[]
}

model Curriculum {
  id                 String @id @default(cuid())
  courseId           String
  headingNumber      String
  headingName        String
  headingDescription String
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Review {
  id           String   @id @default(cuid())
  tutorName    String
  userId       String
  reviewerName String
  rating       Int      @default(0)
  title        String
  description  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CoursePayment {
  id            String        @id @default(cuid())
  transactionId String // Unique identifier for the Paystack transaction reference
  userId        String // ID of the user who made the payment
  courseId      String // ID of the course for which payment is made
  amount        Float // Amount paid
  currency      String // Currency of the payment (e.g. NGN)
  status        PaymentStatus @default(PENDING) // Status of the transaction (e.g., successful, failed)
  paymentDate   DateTime      @default(now()) // Date and time of payment
  verifiedAt    DateTime      @updatedAt
  User          User          @relation(fields: [userId], references: [id])
  Course        Course        @relation(fields: [courseId], references: [id])
}
